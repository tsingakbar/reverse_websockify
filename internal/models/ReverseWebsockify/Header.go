// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ReverseWebsockify

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Header struct {
	_tab flatbuffers.Table
}

func GetRootAsHeader(buf []byte, offset flatbuffers.UOffsetT) *Header {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Header{}
	x.Init(buf, n+offset)
	return x
}

func FinishHeaderBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHeader(buf []byte, offset flatbuffers.UOffsetT) *Header {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Header{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHeaderBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Header) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Header) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Header) Action() Action {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Action(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Header) MutateAction(n Action) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Header) ConnectionId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Header) MutateConnectionId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func HeaderStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func HeaderAddAction(builder *flatbuffers.Builder, action Action) {
	builder.PrependInt8Slot(0, int8(action), 0)
}
func HeaderAddConnectionId(builder *flatbuffers.Builder, connectionId uint64) {
	builder.PrependUint64Slot(1, connectionId, 0)
}
func HeaderEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
